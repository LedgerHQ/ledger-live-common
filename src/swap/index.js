// @flow

import { getAccountCurrency } from "../account";
import network from "../network";
import type {
  Exchange,
  GetExchangeRates,
  SwapCurrencyNameAndSignature,
  SwapProviderNameAndSignature
} from "./types";
import type { CryptoCurrency, TokenCurrency } from "../types/currencies";

export const swapAPIBaseURL = "https://swap.dev.aws.ledger.fr";

export const getExchangeRates: GetExchangeRates = async (
  exchange: Exchange
) => {
  const from = getAccountCurrency(exchange.fromAccount).ticker;
  const to = getAccountCurrency(exchange.toAccount).ticker;

  const res = await network({
    method: "POST",
    url: `${swapAPIBaseURL}/rate/fixed`,
    data: [
      {
        from,
        to,
        amountFrom: exchange.fromAmount
      }
    ]
  });

  if (res.data) {
    return res.data.map(({ rate, rateId, provider }) => {
      return {
        rate,
        rateId,
        provider,
        expirationDate: new Date()
      };
    });
  }

  throw new Error("getExchangeRate: Something broke");
};

const swapProviders: {
  [string]: { nameAndPubkey: Buffer, signature: Buffer }
} = {
  changelly: {
    nameAndPubkey: Buffer.from([0x9, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x6C, 0x6C, 0x79, 0x4, 0x80, 0xD7, 0xC0, 0xD3, 0xA9, 0x18, 0x35, 0x97, 0x39, 0x5F, 0x58, 0xDD, 0xA0, 0x59, 0x99, 0x32, 0x8D, 0xA6, 0xF1, 0x8F, 0xAB, 0xD5, 0xCD, 0xA0, 0xAF, 0xF8, 0xE8, 0xE3, 0xFC, 0x63, 0x34, 0x36, 0xA2, 0xDB, 0xF4, 0x8E, 0xCB, 0x23, 0xD4, 0xD, 0xF7, 0xC3, 0xC7, 0xD3, 0xE7, 0x74, 0xB7, 0x7B, 0x4B, 0x5D, 0xF0, 0xE9, 0xF7, 0xE0, 0x8C, 0xF1, 0xCD, 0xF2, 0xDB, 0xA7, 0x88, 0xEB, 0x8, 0x5B]), // prettier-ignore
    signature: Buffer.from([0x30, 0x44, 0x2, 0x20, 0x6A, 0x57, 0xC9, 0xED, 0x40, 0x30, 0xCB, 0x21, 0x70, 0xA3, 0x45, 0x74, 0x73, 0x75, 0x7E, 0x6, 0x3F, 0xE7, 0x27, 0xC1, 0x43, 0x0, 0x2, 0x51, 0xD9, 0xE9, 0x7F, 0x27, 0x89, 0x90, 0x29, 0x80, 0x2, 0x20, 0x7B, 0x11, 0x97, 0xDA, 0x75, 0xFE, 0x90, 0x9C, 0xB9, 0xE2, 0x85, 0x77, 0x5A, 0xF9, 0xC9, 0x6A, 0x62, 0x69, 0x5C, 0x18, 0x74, 0x56, 0x5B, 0xC6, 0x7B, 0x18, 0xF9, 0xF7, 0xC6, 0x11, 0xDE, 0x82]) // prettier-ignore
  }
};

// Fixme These configuration/signature pairs will tell the swap app which currency app to open and sign with
// alongside which parameters (derivation path and so on). We should be able to generate this instead
const swapCurrencyConfigs: { [string]: SwapCurrencyNameAndSignature } = {
  bitcoin: {
    config: Buffer.from([0x3, 0x62, 0x74, 0x63, 0x7, 0x42, 0x69, 0x74, 0x63, 0x6F, 0x69, 0x6E, 0x0]), // prettier-ignore
    signature: Buffer.from([0x30, 0x44, 0x2, 0x20, 0x47, 0x75, 0xEF, 0x48, 0x8D, 0x5D, 0x14, 0xCB, 0x26, 0x7F, 0x94, 0xDE, 0x61, 0x4D, 0x5F, 0x80, 0xB5, 0x78, 0x3A, 0x12, 0xE0, 0x30, 0x33, 0xE7, 0xA5, 0xEA, 0xC, 0x48, 0xCC, 0x28, 0xFE, 0x37, 0x2, 0x20, 0x76, 0xDE, 0xDE, 0xE9, 0x88, 0xFE, 0xA9, 0xBD, 0x7B, 0x7F, 0x76, 0x8E, 0x53, 0x19, 0xA4, 0x5A, 0x43, 0x2, 0xF1, 0x6C, 0x10, 0xD1, 0xE9, 0x45, 0x98, 0xE4, 0xB2, 0x7B, 0x16, 0x49, 0x88, 0x97]) // prettier-ignore
  },
  litecoin: {
    config: Buffer.from([0x3, 0x6C, 0x74, 0x63, 0x8, 0x4C, 0x69, 0x74, 0x65, 0x63, 0x6F, 0x69, 0x6E, 0x0]), // prettier-ignore
    signature: Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0x8A, 0xBA, 0x2F, 0x2C, 0xAF, 0x35, 0xEB, 0xDA, 0x85, 0x7C, 0x43, 0x5A, 0x7E, 0x1F, 0x84, 0xE3, 0x85, 0x23, 0x4D, 0x25, 0xE7, 0x13, 0x10, 0x9, 0xDA, 0x69, 0xF2, 0x4B, 0xDF, 0x99, 0x10, 0x3D, 0x2, 0x20, 0x47, 0xB6, 0x2F, 0xC5, 0x89, 0x45, 0x3, 0xC9, 0x59, 0x8, 0x20, 0xEB, 0xC3, 0x36, 0x35, 0x7A, 0x85, 0xDE, 0xF0, 0x34, 0xB7, 0xCC, 0x4C, 0x25, 0xD3, 0xE, 0x75, 0x6C, 0x8E, 0x5D, 0xC5, 0x84]) // prettier-ignore
  }
};

export const getCurrencySwapConfig = (
  currency: CryptoCurrency | TokenCurrency
): SwapCurrencyNameAndSignature => {
  const res = swapCurrencyConfigs[currency.id];
  if (!res) {
    throw new Error(`Swap, missing configuration for ${currency.id}`);
  }
  return res;
};

export const getSwapProviders = (
  providerName: string
): SwapProviderNameAndSignature => {
  const res = swapProviders[providerName];
  if (!res) {
    throw new Error(`Unknown partner ${providerName}`);
  }
  return res;
};
