name: Tests
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - master

jobs:
  start-runner:
    name: start self-hosted EC2 runner
    runs-on: [ledger-live-common]
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: get latest LLD runner AMI id
        id: get-ami-id
        run: |
          echo "::set-output name=ami-id::$(aws ec2 describe-images  --filters 'Name=name,Values=ledger-live-runner' --query 'Images[*].ImageId' --output text)"
      - name: start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          ec2-image-id: ${{ steps.get-ami-id.outputs.ami-id }}
          ec2-instance-type: c5.4xlarge
          subnet-id: subnet-03b7b4dff904e0142 # production-shared-private-eu-west-1a
          security-group-id: sg-010daba499648d1e7 # infra-gha-runner-sg
      - name: get volume-id
        id: get-volume-id
        run: |
          echo "::set-output name=volume-id::$(aws ec2 describe-instances --instance-ids ${{ steps.start-ec2-runner.outputs.ec2-instance-id }} --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].Ebs.VolumeId' --output text)"
      - name: resize rootfs
        env:
          VOLUME_ID: ${{ steps.get-volume-id.outputs.volume-id }}
        run: |
          aws ec2 modify-volume --size 30 --volume-id $VOLUME_ID

  jest-linux:
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: prepare runner
        run: |
          sudo growpart /dev/nvme0n1 1
          sudo resize2fs /dev/nvme0n1p1
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: "2.x"
      - name: Install yarn
        run: npm i -g yarn
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: |
          yarn global add yalc codecov
          yarn --frozen-lockfile
      - name: Setup Tests
        run: yarn ci-setup-cli
      - name: Deps versions
        run: yarn jest --version
      - name: Lint
        run: yarn ci-lint
      - name: Run tests
        run: npx cross-env VERBOSE_FILE=tests_output.txt yarn ci-test-common
        timeout-minutes: 60
      - name: upload snapshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: snapshots-src-linux
          path: src/
      - name: upload logs
        if: failure() || success()
        uses: actions/upload-artifact@v2
        with:
          name: tests_output-linux.txt
          path: tests_output.txt

  jest:
    name: jest-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: "2.x"
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: |
          yarn global add yalc codecov
          yarn --frozen-lockfile
      - name: Setup Tests
        run: yarn ci-setup-cli
      - name: Deps versions
        run: yarn jest --version
      - name: Lint
        run: yarn ci-lint
        if: runner.os != 'Windows'
      - name: Setup TimeZone for Windows
        run: tzutil /s "Eastern Standard Time"
        if: runner.os == 'Windows'
      - name: Run tests
        run: npx cross-env VERBOSE_FILE=tests_output.txt yarn ci-test-common
        timeout-minutes: 60
      - name: Run coverage
        if: runner.os == 'macOS'
        run: CODECOV_TOKEN=${{ secrets.CODECOV_TOKEN }} npx codecov
      - name: upload snapshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: snapshots-src-${{ runner.os }}
          path: src/
      - name: upload logs
        if: failure() || success()
        uses: actions/upload-artifact@v2
        with:
          name: tests_output-${{ runner.os }}.txt
          path: tests_output.txt

  cli-linux:
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: [start-runner]
    steps:
      - name: prepare runner
        run: |
          sudo growpart /dev/nvme0n1 1
          sudo resize2fs /dev/nvme0n1p1
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - name: install yarn
        run: npm i -g yarn
      - uses: actions/setup-python@v2
        with:
          python-version: "2.7.x"
      - name: Install linux deps
        run: sudo apt-get install -y libusb-1.0-0-dev jq
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: |
          yarn global add yalc
          yarn --frozen-lockfile
          yarn ci-setup-cli
      - name: Run CLI tests
        run: yarn ci-test-cli
        timeout-minutes: 60

  cli:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: "2.7.x"
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: |
          yarn global add yalc
          yarn --frozen-lockfile
          yarn ci-setup-cli
      - name: Run CLI tests
        run: yarn ci-test-cli
        timeout-minutes: 60

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, cli-linux, jest-linux]
    runs-on: [ledger-live-common]
    if: always()
    steps:
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
